package ru.skypro;

import java.time.LocalDate;

public class Main {

    public static void main(String[] args) {
        checkLeapYear(2023);
        checkOSCompatibility(0,2022);
        getDeliveryTime(65);
    }

    /*### Задание 1
    Реализуйте метод, который получает в качестве параметра год, а затем проверяет, является ли он
    високосным, и выводит результат в консоль.

    *Эту проверку вы уже реализовывали в задании по условным операторам.*

    Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.

    Результат программы выведите в консоль. Если год високосный, то должно быть выведено “*номер года —
    * високосный год”. Если год не високосный, то, соответственно: “*номер года —* не **високосный год”.
    */
    public static void checkLeapYear(int year) {
        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)){
            System.out.println(year + " год является високосным");
        } else System.out.println(year + " год не является високосным");
    }

    /*
    Напишите метод, куда подаются два параметра: тип операционной системы (ОС)
    ( 0 — iOS или 1 — Android) и год выпуска устройства.

    Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).

    Текущий год можно получить таким способом: int currentYear = LocalDate.now().getYear();
    Или самим задать значение вручную, введя в переменную числовое значение.

    В результате программа должна выводить в консоль в зависимости от исходных данных,
    какую версию приложения (обычную или lite) и для какой ОС (Android или iOS) нужно установить пользователю.
     */
    public static void checkOSCompatibility(int clientOS, int clientDeviceYear) {
        int currentYear = LocalDate.now().getYear();

        if(clientOS == 0 && clientDeviceYear < currentYear) {
            System.out.println("Установите облегченную версию приложения для iOS по ссылке");
        } else if (clientOS == 1 && clientDeviceYear < currentYear) {
            System.out.println("Установите облегченную версию приложения для Android по ссылке");
        } else if (clientOS == 0) {
            System.out.println("Установите обычную версию приложения для iOS по ссылке");
        } else System.out.println("Установите обычную версию приложения для Android по ссылке");
    }

    /*
    Возвращаемся к любимой многими задаче на расчет дней доставки банковской карты от банка.

- Текст прошлого задания

    Вернемся к делам банковским. У нас хороший банк, поэтому для наших клиентов мы организуем доставку
    банковских карт на дом с четкой датой доставки. Чтобы известить клиента о том, когда будет доставлена
    его карта, нам нужно знать расстояние от нашего офиса до адреса доставки.

    Правила доставки такие:

    Доставка в пределах 20 км занимает сутки.

    Доставка в пределах от 20 км до 60 км добавляет еще один день доставки.

    Доставка в пределах 60 км до 100 км добавляет еще одни сутки.

    То есть с каждым следующим интервалом доставки срок увеличивается на 1 день.

    Напишите программу, которая выдает сообщение в консоль:

    "Потребуется дней: " + срок доставки

    Объявите целочисленную переменную deliveryDistance = 95, которая содержит дистанцию до клиента.
    Наша задача — доработать код, а именно написать метод, который на вход принимает дистанцию и
    возвращает итоговое количество дней доставки.
     */
    public static void getDeliveryTime(int deliveryDistance) {
        int deliveryTime = 1;
        if (deliveryDistance > 20) {
            deliveryTime++;
        }
        if (deliveryDistance > 60){
            deliveryTime++;
        }
        System.out.println("На доставку потребуется дней: " + deliveryTime);
    }
}
